(defmodule lang.option) 

(deftype (Option T)
  (| [:none]
     [:some T]))

(defn default
  [option fallback]
  (match option
    [:none] fallback
    [:some value] value))

; (âˆ€ X Y (-> (-> X Y) (Option X) (Option Y)))
(definstance (Functor Option)
  (map [f option]
    (match option
      [:none]       [:none]
      [:some value] [:some (f value)])))
